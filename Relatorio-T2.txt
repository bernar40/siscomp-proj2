##################################################
RELATÓRIO por BERNARDO COSTA RUGA 1511651 e RODRIGO LEITE DA SILVA 1413150
##################################################

Segundo Trabalho de Sistemas de Computação – INF 1019

Arquivos: GM.c
		  VM.c
          VM.h
		  minHeap.c
		  minHeap.h
          compressor.log
          compilador.log
          matriz.log
          simulador.log


Compilação:	gcc -pthread GM.c VM.c minHeap.c -o GM

Execução:	./GM <tempo>
                    Obs: Quando não posto, automaticamente assume como 30
                    OBS: Para ver o número de swaps e pagefaults, terminar o programa com ctrl-c.

Testes GM:

    TEMPO = 30ms:
            2677, 0xFF16FF60, W
            2680, 0xFF41F7A0, R
            2679, 0xFFB243A0, R
            2678, 0xA7C20, R
            2677, 0xFF42BF60, R
            2680, 0xFFF5E2C0, R
            2679, 0xFF228D40, R
            2678, 0xFF56BBE0, W
            2677, 0xFE293F60, W
            2680, 0xFFE78900, R
            2679, 0xFF228D60, R
            2678, 0xFF0AFC20, R
            2677, 0xFF41F760, R
            2680, 0x4758A0, R
            2679, 0xFFB243C0, R
            2678, 0xFF216F00, R
            2677, 0xFFC1F760, W
            2680, 0xFF348900, W
            2679, 0xFE113360, R
            2678, 0xFF0A7C20, R
            2677, 0xFF41F840, R
            2680, 0xFF4A30E0, R
            2679, 0xFF1FE308, R
            2678, 0xA7C28, R
            2677, 0xFF41F860, R
            2680, 0xFF00FF05, R
            2679, 0xFF113380, R
            2678, 0xFF0A7C28, R
            2677, 0xFEC6F840, W
            2680, 0xFF49E120, R
            2679, 0xFF1FE2F0, R
            2678, 0xFF0AFF38, R
            2677, 0xFF02FC60, W
            2680, 0x4C25F8, R
            2679, 0xFF1133A0, R
            2678, 0xFF0A7B48, R
            2677, 0xFF41F880, R
            2680, 0xFF4C2600, R
            2679, 0xFE1133C0, R
            2678, 0xFF0A7B48, R
            2677, 0xFF4952E0, R
            2680, 0xFF05A5E0, W
            2679, 0xFF22CCB0, R
            2678, 0x216F00, W
            2677, 0xFFC9D2E0, W
            2680, 0xFFE06600, W
            2679, 0xFF1133E0, R
            2678, 0xFFAB3A90, R
            2677, 0xFE495F10, R
            2680, 0xFF44E4F8, R
            2679, 0xFF113400, R
            2678, 0xFF0A7B58, R
            2677, 0xFFCE5305, W
            2680, 0x44E500, R
            2679, 0xFF22CCC0, R
            2678, 0xFF0A7B58, R
            2677, 0xFF4A3EC0, R
            2680, 0xFF44E520, R
            2679, 0xFE113420, R
            2678, 0xFF0A7B60, R
            2677, 0xFF41FDE0, R
            2680, 0xFF00FF10, R
            2679, 0xFF20A980, R
            2678, 0xAB3AA0, R
            2677, 0xFFBD7DE0, W
            2680, 0xFF6965A0, W
            2679, 0xFF20A968, R
            2678, 0xFF0AFF70, R
            2677, 0xFEE78900, R
            2680, 0xFF44E5C0, R
            2679, 0xFF113440, R
            2678, 0xFF0A7B68, R
            2677, 0xFF4758A0, R
            2680, 0x44E5E0, R
            2679, 0xFF113460, R
            2678, 0xFF0A7B68, R
            2677, 0xFFC70400, W
            2680, 0xFF44E621, R
            2679, 0xFE194730, R
            2678, 0xFFAEF710, R
            2677, 0xFFC706E0, W
            2680, 0xFFDAE640, W
            2679, 0xFF194740, R
            2678, 0xA7B68, R
            2677, 0xFF4006E0, R
            2680, 0xFF414F20, R
            2679, 0xFF194760, R
            2678, 0xFF06FF90, R
            2677, 0xFE19A8A0, W
            2680, 0xFFF7CF20, W
            2679, 0xFF194780, R
            2678, 0xFF0A7B70, R
            2677, 0xFF4A3EE0, R
            2680, 0x4BCFC0, R
            2679, 0xFF20A858, R
            2678, 0xFF0A7B70, R
            2677, 0xFF4A3F00, R
            2680, 0xFF74CFC0, W
            2679, 0xFEFEA840, W
            2678, 0xFF86CD90, R
            2677, 0xFFB5BF00, W
            2680, 0xFF4696A0, R
            2679, 0xFF1947A0, R
            2678, 0xA7B78, R
            2677, 0xFF4A3F20, R
            2680, 0xFF446460, R
            2679, 0xFF20A868, R
            2678, 0xFF0A7B80, R
            2677, 0xFE4A3098, R
            2680, 0xFFF92120, W
            2679, 0xFF1947C0, R
            2678, 0xFFC2E058, W
            2677, 0xFF4A74A0, R
            2680, 0x496EC0, R
            ^C##############################
            Tempo de execucao do programa -> 116.279400
            Numero de PageFaults -> 78
            Numero de Swaps -> 22
            ##############################
    Tempo 90:
            2692, 0xFF41F7A0, R
            2691, 0xFFB243A0, R
            2690, 0xFF0A7C20, R
            2689, 0x16FF60, W
            2692, 0xFFF5E2C0, R
            2691, 0xFF228D40, R
            2690, 0xFF56BBE0, W
            2689, 0xFF42BF60, R
            2692, 0xFEE78900, R
            2691, 0xFF228D60, R
            2690, 0xFF0AFC20, R
            2689, 0xFF293F60, W
            2692, 0xFF4758A0, R
            2691, 0xB243C0, R
            2690, 0xFF216F00, R
            2689, 0xFF41F760, R
            2692, 0xFF348900, W
            2691, 0xFF113360, R
            2690, 0xFE0A7C20, R
            2689, 0xFFC1F760, W
            2692, 0xFF4A30E0, R
            2691, 0xFF1FE308, R
            2690, 0xFF0A7C28, R
            2689, 0x41F840, R
            2692, 0xFF00FF05, R
            2691, 0xFF113380, R
            2690, 0xFF0A7C28, R
            2689, 0xFF41F860, R
            2692, 0xFE49E120, R
            2691, 0xFF1FE2F0, R
            2690, 0xFF0AFF38, R
            2689, 0xFFC6F840, W
            2692, 0xFF4C25F8, R
            2691, 0x1133A0, R
            2690, 0xFF0A7B48, R
            2689, 0xFF02FC60, W
            2692, 0xFF4C2600, R
            2691, 0xFF1133C0, R
            2690, 0xFE0A7B48, R
            2689, 0xFF41F880, R
            2692, 0xFF05A5E0, W
            2691, 0xFF22CCB0, R
            2690, 0xFF216F00, W
            2689, 0x4952E0, R
            2692, 0xFFE06600, W
            2691, 0xFF1133E0, R
            2690, 0xFFAB3A90, R
            2689, 0xFFC9D2E0, W
            2692, 0xFE44E4F8, R
            2691, 0xFF113400, R
            2690, 0xFF0A7B58, R
            2689, 0xFF495F10, R
            2692, 0xFF44E500, R
            2691, 0x22CCC0, R
            2690, 0xFF0A7B58, R
            2689, 0xFFCE5305, W
            2692, 0xFF44E520, R
            2691, 0xFF113420, R
            2690, 0xFE0A7B60, R
            2689, 0xFF4A3EC0, R
            2692, 0xFF00FF10, R
            2691, 0xFF20A980, R
            2690, 0xFFAB3AA0, R
            2689, 0x41FDE0, R
            2692, 0xFF6965A0, W
            2691, 0xFF20A968, R
            2690, 0xFF0AFF70, R
            2689, 0xFFBD7DE0, W
            2692, 0xFE44E5C0, R
            2691, 0xFF113440, R
            2690, 0xFF0A7B68, R
            2689, 0xFFE78900, R
            2692, 0xFF44E5E0, R
            2691, 0x113460, R
            2690, 0xFF0A7B68, R
            2689, 0xFF4758A0, R
            2692, 0xFF44E621, R
            2691, 0xFF194730, R
            2690, 0xFEAEF710, R
            2689, 0xFFC70400, W
            2692, 0xFFDAE640, W
            2691, 0xFF194740, R
            2690, 0xFF0A7B68, R
            2689, 0xC706E0, W
            2692, 0xFF414F20, R
            2691, 0xFF194760, R
            2690, 0xFF06FF90, R
            2689, 0xFF4006E0, R
            2692, 0xFEF7CF20, W
            2691, 0xFF194780, R
            2690, 0xFF0A7B70, R
            2689, 0xFF19A8A0, W
            2692, 0xFF4BCFC0, R
            2691, 0x20A858, R
            2690, 0xFF0A7B70, R
            2689, 0xFF4A3EE0, R
            2692, 0xFF74CFC0, W
            2691, 0xFFFEA840, W
            2690, 0xFE86CD90, R
            2689, 0xFF4A3F00, R
            2692, 0xFF4696A0, R
            2691, 0xFF1947A0, R
            2690, 0xFF0A7B78, R
            2689, 0xB5BF00, W
            2692, 0xFF446460, R
            2691, 0xFF20A868, R
            2690, 0xFF0A7B80, R
            2689, 0xFF4A3F20, R
            2692, 0xFEF92120, W
            2691, 0xFF1947C0, R
            2690, 0xFFC2E058, W
            2689, 0xFF4A3098, R
            2692, 0xFF496EC0, R
            2691, 0x24C3C0, R
            2690, 0xFF0BFF90, R
            2689, 0xFF4A74A0, R
            ^C##############################
            Tempo de execucao do programa -> 120.279129
            Numero de PageFaults -> 73
            Numero de Swaps -> 28
            ##############################



    Tempo 120:
            2710, 0xFF41F7A0, R
            2709, 0xFFB243A0, R
            2708, 0x10A7C20, R
            2707, 0xFF16FF60, W
            2710, 0xF5E2C0, R
            2709, 0xFE228D40, R
            2708, 0xFF56BBE0, W
            2707, 0x342BF60, R
            2709, 0xFF228D60, R
            2710, 0x1E78900, R
            2708, 0x30AFC20, R
            2707, 0xFF293F60, W
            2709, 0x3B243C0, R
            2710, 0xFF4758A0, R
            2708, 0xFE216F00, R
            2707, 0x341F760, R
            2709, 0xFF113360, R
            2710, 0x3348900, W
            2708, 0xFF0A7C20, R
            2707, 0x1C1F760, W
            2709, 0x31FE308, R
            2710, 0xFF4A30E0, R
            2708, 0x30A7C28, R
            2707, 0xFF41F840, R
            2709, 0xFE113380, R
            2710, 0x300FF05, R
            2708, 0xFF0A7C28, R
            2707, 0x341F860, R
            2709, 0xFF1FE2F0, R
            2710, 0x149E120, R
            2708, 0x30AFF38, R
            2707, 0xFFC6F840, W
            2709, 0x31133A0, R
            2710, 0xFF4C25F8, R
            2708, 0xFE0A7B48, R
            2707, 0x302FC60, W
            2709, 0xFF1133C0, R
            2710, 0x34C2600, R
            2708, 0xFF0A7B48, R
            2707, 0x141F880, R
            2709, 0x322CCB0, R
            2710, 0xFF05A5E0, W
            2708, 0x3216F00, W
            2707, 0xFF4952E0, R
            2709, 0xFE1133E0, R
            2710, 0x3E06600, W
            2708, 0xFFAB3A90, R
            2707, 0x3C9D2E0, W
            2709, 0xFF113400, R
            2710, 0x144E4F8, R
            2708, 0x30A7B58, R
            2707, 0xFF495F10, R
            2709, 0x322CCC0, R
            2710, 0xFF44E500, R
            2708, 0xFE0A7B58, R
            2707, 0x3CE5305, W
            2709, 0xFF113420, R
            2710, 0x344E520, R
            2708, 0xFF0A7B60, R
            2707, 0x14A3EC0, R
            2709, 0x320A980, R
            2710, 0xFF00FF10, R
            2708, 0x3AB3AA0, R
            2707, 0xFF41FDE0, R
            2709, 0xFE20A968, R
            2710, 0x36965A0, W
            2708, 0xFF0AFF70, R
            2707, 0x3BD7DE0, W
            2709, 0xFF113440, R
            2710, 0x144E5C0, R
            2708, 0x30A7B68, R
            2707, 0xFFE78900, R
            2709, 0x3113460, R
            2710, 0xFF44E5E0, R
            2708, 0xFE0A7B68, R
            2707, 0x34758A0, R
            2709, 0xFF194730, R
            2710, 0x344E621, R
            2708, 0xFFAEF710, R
            2707, 0x1C70400, W
            2709, 0x3194740, R
            2710, 0xFFDAE640, W
            2708, 0x30A7B68, R
            2707, 0xFFC706E0, W
            2709, 0xFE194760, R
            2710, 0x3414F20, R
            2708, 0xFF06FF90, R
            2707, 0x34006E0, R
            2709, 0xFF194780, R
            2710, 0x1F7CF20, W
            2708, 0x30A7B70, R
            2707, 0xFF19A8A0, W
            2709, 0x320A858, R
            2710, 0xFF4BCFC0, R
            2708, 0xFE0A7B70, R
            2707, 0x34A3EE0, R
            2709, 0xFFFEA840, W
            2710, 0x374CFC0, W
            2708, 0xFF86CD90, R
            2707, 0x14A3F00, R
            2709, 0x31947A0, R
            2710, 0xFF4696A0, R
            2708, 0x30A7B78, R
            2707, 0xFFB5BF00, W
            2709, 0xFE20A868, R
            2710, 0x3446460, R
            2708, 0xFF0A7B80, R
            2707, 0x34A3F20, R
            2709, 0xFF1947C0, R
            2710, 0x1F92120, W
            2708, 0x3C2E058, W
            2707, 0xFF4A3098, R
            2709, 0x324C3C0, R
            2710, 0xFF496EC0, R
            2708, 0xFE0BFF90, R
            2707, 0x34A74A0, R
            2709, 0xFF1916E8, R
            2710, 0x34A0C00, R
            2708, 0xFF0A7B80, R
            2707, 0x149E110, R
            2709, 0x3191700, R
            2710, 0xFF49D640, R
            ^C##############################
            Tempo de execucao do programa -> 121.888952
            Numero de PageFaults -> 70
            Numero de Swaps -> 30
            ##############################


Sobre o projeto:
    O nosso projeto conta com algumas estruturas de dados básicas e outras mais complexas. As mais simples são as estruturas de PageTable e PageFrame. A PageFrame, por exemplo, possui apenas algumas variáveis básicas para seu funcionamento, como o frame_index, o page_index, o pid do programa, entre outras. A PageTable funciona da mesma maneira, com algumas outras variaveis, como rw, e algumas mesmas, como o page_index. Estas estruturas, apesar de simples, tem papel fundamental no código, pois elas vão representar o equivalente a uma tabela de páginas e uma memória física, sendo elas atualizadas pelo GM, o gerenciador de memória. Neste projeto nos é pedido para implementar a substituição de frames utilizando LFU, onde o critério é o numéro de acessos à página nos últimos X ms. 

    Para implementarmos isso fizemos uso de mais 2 estruturas de dados, uma é um min heap e a outra uma pequena estrutura que serve para passar paremetros para uma thread. Elas funcionam da seguinte maneira, o heap serve para que saibamos qual pagina teve menos acessos, sendo ela a menos acessada, sua "value" estará baixa depois do tempo X, e logo com é um min heap, ela estará no topo do heap. Estando ela no topo do heap, quando o proximo page fault acontecer, o nó de cima será retirado e um novo entrará em seu lugar. Porém, isso só será possível com a ajuda de um thread. Com o thread, conseguimos fazer com que a cada X ms o thread subtraisse de cada frame um count, já que a cada acesso à uma página ele soma no count do frame. Porém, é necessário passar o nosso heap e a memória física para o thread para que ele pudesse subtrair e reorganizar o heap de acordo com os novos valores de count. A estrutura é apenas composta por um heap e um PageFrame, com isso, consigo atribuir a cada uma a memoria e o min heap, e depois passar para o thread como um argumento. 

    O jeito que o programa funciona é o seguinte, ele primeiro  se divide em 5, sendo 4 filhos e 1 GM, e aloca uma mémoria compartilhada para cada tabela de páginas pertencente a cada filho. Após isso, ele grava o pid de cada filho em um array compartilhado, que servirá como guia para qual pagetable acessar no futuro. Depois, criamos o heap, tratamos alguns sinais, definimos qual o tempo escolhido pelo usuário, definimos os valores do thread e o começamos. Após isso o GM entra em um loop infinito. Enquanto isso, cada filho vai lendo uma linha de seu respectivo arquivo e calculando o index e o offset de cada endereço virtual, sendo 8 bits o index e 24 bits o offset. Cada programa então chama a função "trans" que tem como objetivo traduzir o endereço logíco recebido em um endereço físico. 

    A função "trans()" é bem simples, ela começa vendo qual filho a está chamando comparando seu pid com o do vetor de pids criado recentemente. Isto lhe dara um código que sera o ID de cada page table. Após isso ele vai abrir a tabela de páginas conrrespondente, um indice ta tabela secundário para auxiliar na implementação, o pFault, que é possui quatros estruturas iguais à tabela de páginas, também um vetor que servira como uma fila para dizer qual pFault acessar, dependendo de qual for o processo chamando a trans e por fim uma estrutura de indice, que servirá para dizer em qual indice do vetor estara armazenado qual programa está acessando a trans. Por exemplo, se P4 rodar pela primeira vez o trans, index_VM será 0, e vet[0] será 3, pois ele usará o pFault[3]. Apos gravar o vet[index], ele somara 1 ao índice e assim o próximo que chamar trans, pegará o indice seguinte e assim por diant. Esse vetor é circular, então quando ele terminar, o indice voltará para 0. Como no começo do código "resetamos" nossas váriaveis, na função trans() ele vai chegar se os parametros forem iguais ao resetados é pq a pagina precisa ir para pagefault, preenchemos o pFault com informações pertinentes, chamos o SIGUSR1 que iniciará o processo de page fault e damos um SIGSTOP para que pare de exectuar até que já tenha ocorrido o pagefault. Após o processo retornar do pagefault, ele terá seu frame number, que se converterá em endereço físico junto ao offset e então o mesmo será printado na tela.

    Por fim o "pagefault" funciona da seguinte maneira, deleteNode(&frameHeap) pega o nó de menor "value" do heap, ou seja, o Least Frequently Used, e o armazena em min. Em seguida ele carrega o o vetor do trans e o index_PF, e então o index_PF só aumentará quando o pFault saber qual será acessado, 0, 1, 2 ou 3, após isso index_PF será somado e o próximo programa que der pagefault usará o próximo index_PF. Então usaremos o pFault[vet[index_PF]] para descobrir qual o pip do pragrama que requisitou o pagefault, após isso, usando a mesma técnica do trans, pegamos o ID correspondente à tabela de páginas do processo. Verificamos então se a página possui ou não frame number, se não é um caso de pagefault então ele muda o bit de written e soma 1 ao contador de acessos do frame que contém a página acessada. Em seguida devolve min ao Heap sem modificá-lo e chama heapify para garantir a integridade do Heap. Caso haja pageFault, havalia min: se min estava preenchido, põe o pid do processo dono da página como perdedor e, se o bit b_written for verdadeiro, ocorre a simulação do swap, onde o processo que gerou o page fault recebe um SIGCONT e um SIGUSR2 para dormir por dois segundo; como uma página foi retirada do frame, altera-se a page table do processo perdedor para refletir essa perda. Se o frame estava vazio, não há necessidade de fazer o requisitador dormir, então envia-se um SIGCONT. min, então, receberá a página que gerou o page fault. A tabela de paginas do requisitador é enfim alterada, devolve min ao Heap, chama heapify para garantir a integridade do Heap e o pagefault acaba.

Análise:

    O algoritmo funciona de forma quase perfeita. Os programas conseguem concorrentemente executar seus pagefaults, e imprimir seus endereços fisicos. Eles conseguem por qual vai executar em um vetor e o pagefault vai lendo esse vetor conforme é chamado, como se fosse uma fila de sinais, que vai empilhando e o pagefault vai lendo. O que não conseguimos implementar foi o algoritmo de semaforos dentro do código. Ele não trata o caso de que se uma página é removida enquanto outro vê que sua página está lá e pretende modifica-la. Analisando agora a diferença de tempo, quando o programa está executando o algoritmo de LFU com 30ms, vemos que no breve intervalo de tempo que rodamos o código (acima) ele foi o que teve mais pagefault e o que menos teve swap. Com 30ms o pc tem uma quantidade de tempo razoável para checar qual página está sendo chamada mais frequentemente, porém como é o menor dos tempos (30 ,90 ,120), ele acaba ainda assim removendo algumas paginas que podem ser chamadas mais no futuro. A maior remoção de paginas causa um maior número de pagefaults, pois as páginas são removidas com mais frequencia, e devido a isso o número de swaps é menor, pois a menos tempo da página ficar na memória e ser modificada. Já com 90ms, temos um tempo maior de reteção de página na memória, sendo assim menos pagefaults e mais swaps, pois há mais tempo de vir algum endereço que modifique a página. O pouco que executamos o programa, já vemos que esse número de fato acontece, ele tem menos pagefaults e mais swaps. Com 120ms é onde vemos o ápice, é quando deveriam haver mais swaps ainda, pois as páginas duram mais tempo na memória. Conseguimos ver que dentre todos os outros tempos, com 120ms o programa tem mais swaps que 90ms e 30ms e menos pagefault que os dois também. 

#######################################################################
O que foi adicionado nessa versão final:
      O sinal de pagefault é tratado como se estivesse numa fila de sinais. Ele vai executando os pagefaults que vão empilhando.
      prints optimizados, apenas os prints necessários estão aparecendo na tela.



